(()=>{"use strict";var r={426:(r,n,e)=>{e.d(n,{Z:()=>a});var t=e(537),o=e.n(t),i=e(645),s=e.n(i)()(o());s.push([r.id,"body{\r\n    text-align: center;\r\n    align-items: center;\r\n    background-color: rgb(27, 48, 78);\r\n    color: rgb(187, 194, 201);\r\n    position: relative;\r\n    overflow-x: hidden;\r\n    overflow-y: hidden;\r\n    scale: 1.2;\r\n}\r\n.uBoard,.aiBoard {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 36px);\r\n    grid-template-rows: repeat(10, 36px);\r\n    padding-top: 10px;\r\n}\r\n\r\n.tile,.aitile{\r\n    border: solid 1px rgb(187, 194, 201);\r\n    width: 35px;\r\n    height: 35px;\r\n}\r\n\r\n.aitile:hover{\r\n    background-color: rgb(56, 96, 151);\r\n    box-shadow: 0px 0px 5px rgb(143, 158, 179);\r\n}\r\n\r\n.games {\r\n    justify-content: center;\r\n    display: flex;\r\n    gap: 300px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\n\r\n.active {\r\n    background-color: rgb(252, 246, 246);\r\n}\r\n\r\n.start {\r\n    display: none;\r\n}\r\n\r\n.hit {\r\n    box-shadow: inset rgb(255, 145, 145, .5) 0px 0px 0px 10px ;\r\n}\r\n\r\n.miss {\r\n    box-shadow: inset rgb(207, 207, 207, .5) 0px 0px 0px 10px ;\r\n}\r\n\r\n.aitile.hit:hover {\r\n    box-shadow: inset rgb(255, 145, 145) 0px 0px 0px 10px ;\r\n}\r\n\r\n.aitile.miss:hover {\r\n    box-shadow: inset rgb(207, 207, 207) 0px 0px 0px 10px ;\r\n}\r\n\r\n.active.hit {\r\n    box-shadow: inset rgb(255, 145, 145, 1) 0px 0px 0px 10px ;\r\n}\r\n\r\n.buttons {\r\n    position: relative;\r\n    width: 300px;\r\n    margin: auto;\r\n}\r\n\r\nbutton {\r\n    top:60px;\r\n    left: 20px;\r\n    position: absolute;\r\n    border-radius: 20px;\r\n    height: 38px;\r\n    width: 260px;\r\n    background-image: linear-gradient(rgb(7, 58, 126), rgb(151, 151, 151),rgb(7, 58, 126));\r\n    border: 0px;\r\n    color: aliceblue;\r\n    font-weight: bolder;\r\n    font-size: 15px;\r\n}\r\n\r\nbutton:hover{\r\n    background-image: linear-gradient(rgb(11, 79, 168), rgb(128, 128, 128),rgb(14, 85, 179));\r\n    color: rgb(207, 207, 207);\r\n    transform: scale(1.1), 200ms;\r\n}\r\n\r\n.start {\r\n    top: 120px;\r\n}\r\n\r\nfieldset{\r\n    width: 100px;\r\n    margin: auto;\r\n    position: relative;\r\n    top: 190px;\r\n    bottom: 180px;\r\n}\r\n\r\n.fieldset {\r\n    display: flex;\r\n}\r\n\r\n.sample{\r\n    margin: auto;\r\n    width: 35px;\r\n    height: 35px;\r\n}\r\n\r\nh1 {\r\n    height: 0px;\r\n    font-size: 120px;\r\n    color: rgb(255, 255, 255);\r\n}\r\n\r\n.result {\r\n    width: 500px;\r\n    top: 20px;\r\n    bottom: 50px;\r\n    display: none;\r\n}\r\n\r\n.result>div{\r\n    font-size: 80px;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,iCAAiC;IACjC,yBAAyB;IACzB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,UAAU;AACd;AACA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,iBAAiB;AACrB;;AAEA;IACI,oCAAoC;IACpC,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kCAAkC;IAClC,0CAA0C;AAC9C;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,UAAU;IACV,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,0DAA0D;AAC9D;;AAEA;IACI,0DAA0D;AAC9D;;AAEA;IACI,sDAAsD;AAC1D;;AAEA;IACI,sDAAsD;AAC1D;;AAEA;IACI,yDAAyD;AAC7D;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,UAAU;IACV,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,YAAY;IACZ,sFAAsF;IACtF,WAAW;IACX,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,wFAAwF;IACxF,yBAAyB;IACzB,4BAA4B;AAChC;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,gBAAgB;IAChB,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,SAAS;IACT,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB",sourcesContent:["body{\r\n    text-align: center;\r\n    align-items: center;\r\n    background-color: rgb(27, 48, 78);\r\n    color: rgb(187, 194, 201);\r\n    position: relative;\r\n    overflow-x: hidden;\r\n    overflow-y: hidden;\r\n    scale: 1.2;\r\n}\r\n.uBoard,.aiBoard {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 36px);\r\n    grid-template-rows: repeat(10, 36px);\r\n    padding-top: 10px;\r\n}\r\n\r\n.tile,.aitile{\r\n    border: solid 1px rgb(187, 194, 201);\r\n    width: 35px;\r\n    height: 35px;\r\n}\r\n\r\n.aitile:hover{\r\n    background-color: rgb(56, 96, 151);\r\n    box-shadow: 0px 0px 5px rgb(143, 158, 179);\r\n}\r\n\r\n.games {\r\n    justify-content: center;\r\n    display: flex;\r\n    gap: 300px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\n\r\n.active {\r\n    background-color: rgb(252, 246, 246);\r\n}\r\n\r\n.start {\r\n    display: none;\r\n}\r\n\r\n.hit {\r\n    box-shadow: inset rgb(255, 145, 145, .5) 0px 0px 0px 10px ;\r\n}\r\n\r\n.miss {\r\n    box-shadow: inset rgb(207, 207, 207, .5) 0px 0px 0px 10px ;\r\n}\r\n\r\n.aitile.hit:hover {\r\n    box-shadow: inset rgb(255, 145, 145) 0px 0px 0px 10px ;\r\n}\r\n\r\n.aitile.miss:hover {\r\n    box-shadow: inset rgb(207, 207, 207) 0px 0px 0px 10px ;\r\n}\r\n\r\n.active.hit {\r\n    box-shadow: inset rgb(255, 145, 145, 1) 0px 0px 0px 10px ;\r\n}\r\n\r\n.buttons {\r\n    position: relative;\r\n    width: 300px;\r\n    margin: auto;\r\n}\r\n\r\nbutton {\r\n    top:60px;\r\n    left: 20px;\r\n    position: absolute;\r\n    border-radius: 20px;\r\n    height: 38px;\r\n    width: 260px;\r\n    background-image: linear-gradient(rgb(7, 58, 126), rgb(151, 151, 151),rgb(7, 58, 126));\r\n    border: 0px;\r\n    color: aliceblue;\r\n    font-weight: bolder;\r\n    font-size: 15px;\r\n}\r\n\r\nbutton:hover{\r\n    background-image: linear-gradient(rgb(11, 79, 168), rgb(128, 128, 128),rgb(14, 85, 179));\r\n    color: rgb(207, 207, 207);\r\n    transform: scale(1.1), 200ms;\r\n}\r\n\r\n.start {\r\n    top: 120px;\r\n}\r\n\r\nfieldset{\r\n    width: 100px;\r\n    margin: auto;\r\n    position: relative;\r\n    top: 190px;\r\n    bottom: 180px;\r\n}\r\n\r\n.fieldset {\r\n    display: flex;\r\n}\r\n\r\n.sample{\r\n    margin: auto;\r\n    width: 35px;\r\n    height: 35px;\r\n}\r\n\r\nh1 {\r\n    height: 0px;\r\n    font-size: 120px;\r\n    color: rgb(255, 255, 255);\r\n}\r\n\r\n.result {\r\n    width: 500px;\r\n    top: 20px;\r\n    bottom: 50px;\r\n    display: none;\r\n}\r\n\r\n.result>div{\r\n    font-size: 80px;\r\n}"],sourceRoot:""}]);const a=s},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(t)for(var a=0;a<this.length;a++){var A=this[a][0];null!=A&&(s[A]=!0)}for(var p=0;p<r.length;p++){var l=[].concat(r[p]);t&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),s=e.sources.map((function(r){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(r," */")}));return[n].concat(s).concat([i]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var i={},s=[],a=0;a<r.length;a++){var A=r[a],p=t.base?A[0]+t.base:A[0],l=i[p]||0,d="".concat(p," ").concat(l);i[p]=l+1;var c=e(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==c)n[c].references++,n[c].updater(u);else{var h=o(u,t);t.byIndex=a,n.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var s=0;s<i.length;s++){var a=e(i[s]);n[a].references--}for(var A=t(r,o),p=0;p<i.length;p++){var l=e(i[p]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=A}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}},498:(r,n,e)=>{e.d(n,{V:()=>o});var t=e(643);class o{constructor(r="ai"){this.owner=r,this.board=[],this.map=this.generateMap(),this.started=!1,this.shipsLeft={},this.shots=[]}allShipSunk(){return 0==Object.keys(this.shipsLeft).length}shipMarker(r){for(const n in this.shipsLeft)this.shipsLeft[n].positions.includes(r)&&this.shipsLeft[n].hit.push(r),this.shipsLeft[n].isSunk()&&delete this.shipsLeft[n]}generateMap(){for(let r=0;r<100;r++)this.board.push({ship:!1})}generateShip(){this.shipsLeft={};for(let r=1;r<=5;r++){let n=Math.floor(2*Math.random()),e=Math.round(99*Math.random());if(0==n)if(e-10*r>0){let n=new t.l(r,e,"v","u");this.shipsLeft[r]=n}else{let n=new t.l(r,e,"v","d");this.shipsLeft[r]=n}else if(Math.floor(e/10)==Math.floor((e+r)/10)){let n=new t.l(r,e,"h","f");this.shipsLeft[r]=n}else{let n=new t.l(r,e,"h","b");this.shipsLeft[r]=n}}"user"==this.owner?function(r){for(let n of r.board)n.ship=!1;for(let r of document.querySelectorAll(".active"))r.classList.remove("active");for(let n=1;n<=5;n++)for(let e of r.shipsLeft[n].positions)r.board[e].ship=!0,document.querySelector(`.uBoard>[id='${e}']`).classList.add("active")}(this):function(r){for(let n of r.board)n.ship=!1;for(let r of document.querySelectorAll(".aiactive"))r.classList.remove("aiactive");for(let n=1;n<=5;n++)for(let e of r.shipsLeft[n].positions)r.board[e].ship=!0,document.querySelector(`.aiBoard>[id='${e}']`).classList.add("aiactive")}(this)}}},643:(r,n,e)=>{e.d(n,{l:()=>t});class t{constructor(r,n,e,t){this.name=name,this.length=r,this.positions=this.positions(n,e,t),this.hit=[]}isSunk(){return this.hit.length==this.length}hit(r){this.hit.push(r)}positions(r,n,e){let t=[];if("v"==n)if("u"==e)for(let n=0;n<this.length;n++){let e=parseInt(r)-10*n;t.push(e)}else for(let n=0;n<this.length;n++){let e=parseInt(r)+10*n;t.push(e)}else if("f"==e)for(let n=0;n<this.length;n++){let e=parseInt(r)+n;t.push(e)}else for(let n=0;n<this.length;n++){let e=parseInt(r)-n;t.push(e)}return t}}}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return r[t](i,i.exports,e),i.exports}e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),e.nc=void 0,(()=>{var r=e(379),n=e.n(r),t=e(795),o=e.n(t),i=e(569),s=e.n(i),a=e(565),A=e.n(a),p=e(216),l=e.n(p),d=e(589),c=e.n(d),u=e(426),h={};h.styleTagTransform=c(),h.setAttributes=A(),h.insert=s().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;var x=e(498);const f=new x.V("user");let g=document.createElement("div");g.classList.add("uBoard"),document.querySelector(".userGame").appendChild(g);for(let r in f.board){let n=document.createElement("div");n.id=parseInt(r),n.classList.add("tile"),g.appendChild(n)}let b=document.querySelector(".Reset"),m=document.querySelector(".start");b.addEventListener("click",(()=>{do{f.generateShip()}while(15!=document.querySelectorAll(".active").length);m.style.display="inline"})),m.addEventListener("click",(()=>{do{v.generateShip()}while(15!=document.querySelectorAll(".aiactive").length);f.started=!0,b.style.display="none",m.style.display="none"}));let C=document.createElement("div");C.classList.add("aiBoard");const v=new x.V;document.querySelector(".aiGame").appendChild(C);for(let r in f.board){let n=document.createElement("div");n.id=parseInt(r),n.classList.add("aitile"),n.addEventListener("click",(()=>{1!=f.started||n.classList.contains("hit")||n.classList.contains("miss")||(v.board[n.id].ship?n.classList.add("hit"):(v.shots.push(n.id),n.classList.add("miss")),v.shipMarker(parseInt(n.id)),v.allShipSunk()&&(f.started=!1,B("Win")),1==f.started&&(f.started=!1,setTimeout((()=>I()),500)))})),C.appendChild(n)}function I(){const r=y();f.shots.push(r),f.board[r].ship?(document.querySelector(`.uBoard>[id='${r}']`).classList.add("hit"),document.querySelector(".miss.sample").style="box-shadow: inset rgb(207, 207, 207, .5) 0px 0px 0px 10px",document.querySelector(".hit.sample").style="box-shadow: inset rgb(255, 145, 145) 0px 0px 0px 10px"):(document.querySelector(`.uBoard>[id='${r}']`).classList.add("miss"),document.querySelector(".miss.sample").style="box-shadow: inset rgb(207, 207, 207) 0px 0px 0px 10px",document.querySelector(".hit.sample").style="box-shadow: inset rgb(255, 145, 145, .5) 0px 0px 0px 10px"),f.shipMarker(parseInt(r)),f.allShipSunk()?(f.started=!1,B("Lost")):f.started=!0}function y(){let r=Math.floor(100*Math.random());return f.shots.includes(r)&&(r=y()),r}function B(r){document.querySelector(".result>div").textContent=`You ${r}!`,document.querySelector(".result").style.display="inline"}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,